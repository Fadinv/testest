{"version":3,"sources":["features/card/CardField/CardField.module.sass","features/card/Card/Card.module.sass","features/card/cardSlice.ts","app/hooks.ts","features/card/utils.ts","features/card/Like/Like.tsx","features/card/Card/Card.tsx","features/card/CardField/CardField.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/card/Like/Like.module.sass"],"names":["module","exports","cardSlice","createSlice","name","initialState","list","reducers","setState","state","action","concat","payload","like","liked","deleteDog","deleted","actions","selectDogsList","card","useAppDispatch","useDispatch","useAppSelector","useSelector","useDogs","dispatch","useEffect","fetch","then","res","json","newDogs","message","map","src","catch","console","error","classes","classNames","filter","cl","join","Like","index","onClick","className","styles","container","version","id","xmlns","x","y","viewBox","d","Card","inner","style","backgroundImage","delete","column","text","info","CardField","dogs","dog","key","App","store","configureStore","reducer","cardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4a09522.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CardField_container__1bBT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Card_container__3u-mA\",\"inner\":\"Card_inner__XhpoP\",\"delete\":\"Card_delete__3bZHJ\",\"column\":\"Card_column__3n-nW\",\"text\":\"Card_text__2iWs-\",\"info\":\"Card_info__3pc-q\"};","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface CardState {\n\tlist: CardStateList;\n}\n\nexport type CardStateList = {\n\tsrc: string;\n\tliked: boolean;\n\tdeleted: boolean;\n}[];\n\nconst initialState: CardState = {list: []};\n\nexport const cardSlice = createSlice({\n\tname: 'card',\n\tinitialState,\n\treducers: {\n\t\tsetState: (state, action: PayloadAction<CardStateList>) => {\n\t\t\tstate.list = state.list.concat(action.payload);\n\t\t},\n\t\tlike: (state, action: PayloadAction<number>) => {\n\t\t\tstate.list[action.payload].liked = !state.list[action.payload].liked;\n\t\t},\n\t\tdeleteDog: (state, action: PayloadAction<number>) => {\n\t\t\tstate.list[action.payload].deleted = true;\n\t\t},\n\t},\n});\n\nexport const { like, setState, deleteDog } = cardSlice.actions;\n\nexport const selectLengthDogs = (state: RootState) => state.card.list.length;\nexport const selectDogsList = (state: RootState) => state.card.list;\n\nexport default cardSlice.reducer;\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\nimport type {RootState, AppDispatch} from './store';\nimport {useEffect} from 'react';\nimport {CardState, CardStateList, setState} from '../features/card/cardSlice';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nconst fetchDogs = (): Promise<{ message: string[] }> => fetch('https://dog.ceo/api/breed/hound/images').then(res => res.json());\n\nexport const useDogs = () => {\n\tconst dispatch = useAppDispatch();\n\tuseEffect(() => {\n\t\tfetchDogs()\n\t\t\t.then((res) => {\n\t\t\t\tconst newDogs: CardStateList = res.message.map(src => ({src, deleted: false, liked: false}));\n\t\t\t\tdispatch(setState(newDogs));\n\t\t\t})\n\t\t\t.catch(console.error);\n\t}, [dispatch]);\n};","export const classes = (...classNames: (string | undefined | false | null)[]) => {\n\tclassNames = classNames.filter(cl => !!cl);\n\treturn (classNames || []).join(' ');\n};","import * as React from 'react';\nimport styles from './Like.module.sass'\nimport {useAppDispatch} from '../../../app/hooks';\nimport {like} from '../cardSlice';\nimport {classes} from '../utils';\n\nconst likeSvg = () => (\n\t<svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 51.997 51.997\">\n\t<path d=\"M51.911,16.242C51.152,7.888,45.239,1.827,37.839,1.827c-4.93,0-9.444,2.653-11.984,6.905\n\t\tc-2.517-4.307-6.846-6.906-11.697-6.906c-7.399,0-13.313,6.061-14.071,14.415c-0.06,0.369-0.306,2.311,0.442,5.478\n\t\tc1.078,4.568,3.568,8.723,7.199,12.013l18.115,16.439l18.426-16.438c3.631-3.291,6.121-7.445,7.199-12.014\n\t\tC52.216,18.553,51.97,16.611,51.911,16.242z M15.999,9.904c-4.411,0-8,3.589-8,8c0,0.553-0.447,1-1,1s-1-0.447-1-1\n\t\tc0-5.514,4.486-10,10-10c0.553,0,1,0.447,1,1S16.551,9.904,15.999,9.904z\"/>\n\t</svg>\n);\n\ninterface LikeProps {\n\tindex: number;\n\tliked?: boolean;\n}\n\nexport const Like: React.FC<LikeProps> = ({index, liked}) => {\n\tconst dispatch = useAppDispatch();\n\n\treturn (\n\t\t<span onClick={() => dispatch(like(index))} className={classes(styles.container, liked && styles.liked)}>\n\t\t\t{likeSvg()}\n\t\t</span>\n\t);\n};","import * as React from 'react';\nimport styles from './Card.module.sass';\nimport {useEffect} from 'react';\nimport {Like} from '../Like/Like';\nimport {useAppDispatch} from '../../../app/hooks';\nimport {deleteDog} from '../cardSlice';\n\ninterface CardProps {\n\tsrc: string;\n\tindex: number;\n\tinfo?: string;\n\tliked?: boolean;\n\tdeleted?: boolean;\n}\n\nconst Card: React.FC<CardProps> = ({src, liked, deleted, index}) => {\n\tuseEffect(() => {});\n\tconst dispatch = useAppDispatch();\n\tif (deleted) return null;\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<div className={styles.inner} style={{backgroundImage: `url(${src})`}}>\n\t\t\t\t<span onClick={() => dispatch(deleteDog(index))} className={styles.delete}>\n\t\t\t\t\tX\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className={styles.column}>\n\t\t\t\t<div className={styles.text}>\n\t\t\t\t\t{src}\n\t\t\t\t</div>\n\t\t\t\t<div className={styles.info}>\n\t\t\t\t\t<Like liked={liked} index={index}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;","import * as React from 'react';\nimport styles from './CardField.module.sass';\nimport {useAppDispatch, useAppSelector, useDogs} from '../../../app/hooks';\nimport Card from '../Card/Card';\nimport {selectDogsList, selectLengthDogs} from '../cardSlice';\n\ninterface CardFieldProps {\n}\n\nconst CardField: React.FC<CardFieldProps> = () => {\n\tuseDogs();\n\n\tconst dogs = useAppSelector(selectDogsList);\n\n\treturn (\n\t\t<div className={styles['container']}>\n\t\t\t{(dogs || []).map((dog, key) => <Card key={key} index={key} src={dog.src} liked={dog.liked} deleted={dog.deleted}/>)}\n\t\t</div>\n\t);\n};\n\nexport default CardField;","import React from 'react';\nimport './App.css';\nimport CardField from './features/card/CardField/CardField';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<CardField/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport cardReducer from '../features/card/cardSlice';\n\nexport const store = configureStore({\n  reducer: {\n    card: cardReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Like_container__3ahjM\",\"liked\":\"Like_liked__wkPJ0\"};"],"sourceRoot":""}